{"version":3,"sources":["components/Node.js","components/Gallery.js","App.js","reportWebVitals.js","index.js"],"names":["Node","props","useState","click","setClick","clickedChildren","setClickedChildren","type","label","currNodeLabel","currNodeChildren","setCurrNodeChildren","baseUrl","receiptUrl","getData","useCallback","a","axios","get","json","headers","result","console","log","resultData","data","clickedChildrenArray","Array","length","fill","index","window","alert","message","level","split","nodesInLevel","siblings","currNode","className","style","transform","r","n","i","Math","PI","x","abs","cos","y","sin","calcPosition","onClick","children","map","nodeChild","toString","Gallery","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e215e5c.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport const Node = (props) => {\r\n  const [click, setClick] = useState(false);\r\n  const [clickedChildren, setClickedChildren] = useState([]);\r\n  const [currNodeType, setCurrNodeType] = useState(props.type);\r\n  const [currNodeLabel, setCurrNodeLabel] = useState(props.label);\r\n  const [currNodeChildren, setCurrNodeChildren] = useState([]);\r\n\r\n  const baseUrl = \"http://18.203.83.17/public/explorePictures?path=\";\r\n  const receiptUrl = props.label ? baseUrl + \"/\" + props.label : baseUrl;\r\n  const clientToken = \"2d4e69f4823176197ccf41caa5ee6456\";\r\n\r\n  const getData = useCallback(async () => {\r\n    try {\r\n      // Get result from server\r\n      const result = await axios.get(`${receiptUrl}`, {\r\n        json: true,\r\n        headers: { \"X-TOKEN\": clientToken },\r\n      });\r\n      console.log(\"inside try\");\r\n\r\n      // Get next children nodes to the state\r\n      const resultData = result.data.data;\r\n      setCurrNodeChildren(resultData);\r\n      console.log(resultData);\r\n\r\n      // Update that the current node is clicked\r\n      setClick(true);\r\n\r\n      // Update the parent's \"clicks\" array:\r\n      // Turn on the flag that the current node is clicked\r\n      // Turn off the flags for all the other siblings.\r\n      // Such that if the sibling's menu was open it would close.\r\n      props.setClickedChildren((clickedChildren) => {\r\n        let clickedChildrenArray = new Array(resultData.length).fill(false);\r\n        clickedChildrenArray[props.index] = true;\r\n        return clickedChildrenArray;\r\n      });\r\n    } catch (err) {\r\n      // Request fail\r\n      window.alert(err.message);\r\n    }\r\n  });\r\n\r\n  const calcPosition = (level, nodesInLevel, currNode) => {\r\n    if (!currNodeChildren) return;\r\n\r\n    // Arc level radius\r\n    let r = (level + 1) * 7;\r\n\r\n    // The quantity of nodes in the current level\r\n    let n = nodesInLevel;\r\n\r\n    // The current node index\r\n    let i = currNode;\r\n\r\n    // The current node angle\r\n    let a = (Math.PI / 2 / (n + 1)) * i;\r\n\r\n    // Calculate the current node position on the arc\r\n    let x = Math.abs(r * Math.cos(a));\r\n    let y = Math.abs(r * Math.sin(a));\r\n    console.log(\"pos: a=\", a, \"r=\", r, \"n=\", n, \"i=\", i);\r\n\r\n    // Translate the node to the calculated position on the arc\r\n    let style = \"translate(\" + x + \"vw, \" + y + \"vw)\";\r\n\r\n    return style;\r\n  };\r\n\r\n  // Set the current node level according to the path's \"/\" char\r\n  const level = currNodeLabel.split(\"/\").length;\r\n  console.log(currNodeLabel);\r\n\r\n  // Set the current node level according to the path's \"/\" char\r\n  const nodesInLevel = props.siblings.length;\r\n  console.log(props.siblings.length);\r\n\r\n  const currNode = props.index;\r\n  return (\r\n    <>\r\n      <button\r\n        className={\r\n          props.label === \"root\"\r\n            ? \"root\"\r\n            : props.type === 0\r\n            ? click\r\n              ? \"clicked-folder\"\r\n              : \"folder\"\r\n            : \"picture\"\r\n        }\r\n        style={{ transform: calcPosition(level, nodesInLevel, currNode) }}\r\n        onClick={getData}\r\n      >\r\n        {level}\r\n      </button>\r\n      {click && props.clickedChildren[props.index] && (\r\n        <ul className=\"nodes\">\r\n          {currNodeChildren.children &&\r\n            currNodeChildren.children.map((nodeChild, index) => (\r\n              <Node\r\n                key={nodeChild.label}\r\n                index={index}\r\n                type={nodeChild.type}\r\n                label={currNodeLabel + \"/\" + nodeChild.label.toString()}\r\n                siblings={currNodeChildren.children}\r\n                clickedChildren={clickedChildren}\r\n                setClickedChildren={setClickedChildren}\r\n              ></Node>\r\n            ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport \"./Gallery.css\";\r\n\r\nexport const Gallery = (props) => {\r\n  return (\r\n    <>\r\n      <div\r\n        className={props.type}\r\n        onClick={() => {\r\n          if (props.type === 0) return;\r\n          if (props.type === 1) return;\r\n        }}\r\n      ></div>\r\n    </>\r\n  );\r\n};\r\n","import \"./App.css\";\n\nimport axios from \"axios\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Node } from \"./components/Node\";\nimport { Gallery } from \"./components/Gallery\";\n\nfunction App() {\n  const [clickedChildren, setClickedChildren] = useState([]);\n\n  const arr = [];\n  return (\n    <div className=\"App\">\n      <ul className=\"nodes\">\n        <Node\n          className={\"root\"}\n          label={\"root\"}\n          type={\"0\"}\n          siblings={arr}\n          clickedChildren={clickedChildren}\n          setClickedChildren={setClickedChildren}\n        ></Node>\n      </ul>\n      <Gallery></Gallery>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}